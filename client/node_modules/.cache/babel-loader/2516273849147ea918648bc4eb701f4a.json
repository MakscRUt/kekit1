{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'cho to ne to drujishe');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"wBqGcGl6EafFNGt940fH8x5vtvA=\");","map":{"version":3,"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","Error","message","e","clearError"],"sources":["C:/Users/maxiv/Desktop/Новая папка/client/src/hooks/http.hook.js"],"sourcesContent":["import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () =>{\r\n    const[loading, setLoading] = useState(false)\r\n    const[error, setError] = useState(null)\r\n    const request = useCallback( async (url, method = 'GET', body= null, headers = {})=>{\r\n        setLoading(true)\r\n        try{\r\n            if (body){\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok){\r\n                throw new Error(data.message ||'cho to ne to drujishe')\r\n            }\r\n\r\n            setLoading(false)\r\n\r\n            return data \r\n            \r\n        } catch (e){\r\n\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n\r\n        }\r\n}, [])\r\n\r\nconst clearError = useCallback ( () => setError(null), [] )\r\n\r\nreturn {loading, request, error, clearError}\r\n}"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAK;EAAA;;EACxB,MAAK,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAArC;EACA,MAAK,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAjC;EACA,MAAMO,OAAO,GAAGN,WAAW,CAAE,gBAAOO,GAAP,EAAuD;IAAA,IAA3CC,MAA2C,uEAAlC,KAAkC;IAAA,IAA3BC,IAA2B,uEAArB,IAAqB;IAAA,IAAfC,OAAe,uEAAL,EAAK;IAChFP,UAAU,CAAC,IAAD,CAAV;;IACA,IAAG;MACC,IAAIM,IAAJ,EAAS;QACLA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;QACAC,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;MACH;;MACD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;QAACC,MAAD;QAASC,IAAT;QAAeC;MAAf,CAAN,CAA5B;MACA,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;MAEA,IAAI,CAACH,QAAQ,CAACI,EAAd,EAAiB;QACb,MAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAe,uBAAzB,CAAN;MACH;;MAEDhB,UAAU,CAAC,KAAD,CAAV;MAEA,OAAOY,IAAP;IAEH,CAhBD,CAgBE,OAAOK,CAAP,EAAS;MAEPjB,UAAU,CAAC,KAAD,CAAV;MACAE,QAAQ,CAACe,CAAC,CAACD,OAAH,CAAR;MACA,MAAMC,CAAN;IAEH;EACR,CAzB8B,EAyB5B,EAzB4B,CAA3B;EA2BJ,MAAMC,UAAU,GAAGrB,WAAW,CAAG,MAAMK,QAAQ,CAAC,IAAD,CAAjB,EAAyB,EAAzB,CAA9B;EAEA,OAAO;IAACH,OAAD;IAAUI,OAAV;IAAmBF,KAAnB;IAA0BiB;EAA1B,CAAP;AACC,CAjCM;;GAAMpB,O"},"metadata":{},"sourceType":"module"}